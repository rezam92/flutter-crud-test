// Mocks generated by Mockito 5.1.0 from annotations
// in mc_crud_test/test/domain/usecases/customers_usecase_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mc_crud_test/application/error/failure.dart' as _i5;
import 'package:mc_crud_test/domain/entities/customre.dart' as _i6;
import 'package:mc_crud_test/domain/repos/customre_repo.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [CustomerRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockCustomerRepo extends _i1.Mock implements _i3.CustomerRepo {
  MockCustomerRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Customer>>> getCustomers() =>
      (super.noSuchMethod(Invocation.method(#getCustomers, []),
              returnValue:
                  Future<_i2.Either<_i5.Failure, List<_i6.Customer>>>.value(
                      _FakeEither_0<_i5.Failure, List<_i6.Customer>>()))
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Customer>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> createCustomers(
          _i6.Customer? customer) =>
      (super.noSuchMethod(Invocation.method(#createCustomers, [customer]),
              returnValue: Future<_i2.Either<_i5.Failure, void>>.value(
                  _FakeEither_0<_i5.Failure, void>()))
          as _i4.Future<_i2.Either<_i5.Failure, void>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Customer>> readCustomer(int? id) =>
      (super.noSuchMethod(Invocation.method(#readCustomer, [id]),
              returnValue: Future<_i2.Either<_i5.Failure, _i6.Customer>>.value(
                  _FakeEither_0<_i5.Failure, _i6.Customer>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Customer>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> updateCustomers(
          _i6.Customer? customer) =>
      (super.noSuchMethod(Invocation.method(#updateCustomers, [customer]),
              returnValue: Future<_i2.Either<_i5.Failure, void>>.value(
                  _FakeEither_0<_i5.Failure, void>()))
          as _i4.Future<_i2.Either<_i5.Failure, void>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteCustomers(int? id) =>
      (super.noSuchMethod(Invocation.method(#deleteCustomers, [id]),
              returnValue: Future<_i2.Either<_i5.Failure, void>>.value(
                  _FakeEither_0<_i5.Failure, void>()))
          as _i4.Future<_i2.Either<_i5.Failure, void>>);
}
